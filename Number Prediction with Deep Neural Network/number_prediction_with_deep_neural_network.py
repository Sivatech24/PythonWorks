# -*- coding: utf-8 -*-
"""Number Prediction with Deep Neural Network.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h804P2tMmRWiV6kXr-q8Qxcfi8uHpzJC

# Number Prediction with Deep Neural Network

## Description:
This project demonstrates how to train a deep neural network (DNN) for number prediction, where the goal is to predict the next number in a sequence. The model is built using TensorFlow/Keras and trained on a simple dataset where each input number corresponds to the next number in the sequence.

## Key Features:

Deep Neural Network Architecture: The network consists of multiple layers with progressively decreasing neuron counts, starting from 8192 neurons down to 1 neuron in the output layer. Regularization techniques such as L2 regularization, Batch Normalization, and Leaky ReLU activations are used to improve performance and prevent overfitting.
Model Saving and Loading: After training, the model is saved in the Keras HDF5 format (.h5) for easy storage and future use. The saved model can be loaded separately in another program for making predictions.
"""

import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, BatchNormalization, LeakyReLU
from tensorflow.keras.regularizers import l2
from tensorflow.keras.optimizers import Adam

# Generate a synthetic dataset for number prediction
X = np.array([i for i in range(1, 1001)])  # Numbers 1 to 1000 as input features
y = np.array([i + 1 for i in range(1, 1001)])  # Next number as the label (target)

# Reshape the data to match the model input shape (batch_size, input_dim)
X = X.reshape(-1, 1)
y = y.reshape(-1, 1)

# Build the model in Sequential format
model = Sequential([
    Dense(1024, input_shape=(1,), kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    LeakyReLU(alpha=0.1),

    Dropout(0.3),

    Dense(512, kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    LeakyReLU(alpha=0.1),

    Dense(256, kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    LeakyReLU(alpha=0.1),

    Dense(128, kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    LeakyReLU(alpha=0.1),

    Dense(64, kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    LeakyReLU(alpha=0.1),

    Dense(32, kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    LeakyReLU(alpha=0.1),

    Dense(16, kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    LeakyReLU(alpha=0.1),

    Dense(8, kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    LeakyReLU(alpha=0.1),

    Dense(4, kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    LeakyReLU(alpha=0.1),

    Dense(2, kernel_regularizer=l2(0.01)),
    BatchNormalization(),
    LeakyReLU(alpha=0.1),

    Dense(1)  # Output layer with 1 neuron (for regression)
])

# Compile the model
model.compile(optimizer=Adam(), loss='mean_squared_error')

# Train the model
model.fit(X, y, epochs=100, batch_size=32, validation_split=0.2)

# Save the model in Keras HDF5 format
model.save('number_prediction_model.h5')
print("Model saved successfully in HDF5 format!")

import tensorflow as tf
# Load the trained LSTM model
model = tf.keras.models.load_model("number_prediction_model.h5")

# Verify model structure
model.summary()

"""# Load and Use the Model

This program loads the saved model and uses it to make predictions, in this case, predicting the next number after 1000.
"""

from tensorflow.keras.models import load_model
import numpy as np

# Load the saved model
model = load_model('number_prediction_model.h5')
print("Model loaded successfully!")

# Test the model by predicting the next number after 1000
test_input = np.array([1001])  # The next number we want to predict after 1000
test_input = test_input.reshape(-1, 1)  # Reshaping for the model input
prediction = model.predict(test_input)

print(f"Prediction for the next number after 1000: {prediction[0][0]}")

# Save the model in Keras HDF5 format
model.save('number_prediction_model.keras')
print("Model saved successfully in keras format!")

# Save the model in Keras HDF5 format
model.save('number_prediction_model.pkl')
print("Model saved successfully in PKL format!")